{"version":3,"sources":["../../src/utils/common.util.ts","../../src/converts/korean.convert.ts","../../src/index.ts","App.js","index.js"],"names":["App","example","ReactDOM","render","document","getElementById"],"mappings":"gMAAa,G,KAAqB,SAChC,EACA,GAEE,OAAE,EAAa,QAAU,EAClB,EAEA,EAAa,QAClB,IAAI,OAAO,cAAc,EAAS,cAAe,KACjD,OCFA,EAAW,CACf,CAAC,GAAI,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,UAC7C,CAAC,GAAI,SAAK,SAAK,UACf,CAAC,GAAI,SAAK,SAAK,WAcJ,EAAgB,SAC3B,EACA,GAEM,IDbN,ECaM,EDPyB,SAC/B,GAEA,MAAO,CACL,eAAgB,KAAK,IAAI,GACzB,WAAY,EAAe,GCEU,CAAkB,GAAjD,EAAc,iBAAE,EAAU,aAE5B,GDfN,ECc+B,EAAe,WDXvC,EAAmB,ECWgC,GDXP,MAAM,MCatD,UACA,KAAI,SAAC,GAAU,SAAM,MAAM,IAAI,aAE9B,EAAyB,GA4B7B,OAzBE,EADE,EAAO,SAAS,SACH,EACZ,KAAI,SAAC,EAAc,GAGlB,OAFA,EAAa,QAAQ,EAAS,GAAG,IACjC,EAAa,UACN,EAAO,SAAS,SACnB,EAAmB,EAAa,KAAK,IAAK,GAC1C,EAAa,KAAK,OAEvB,UAEY,EACZ,KAAI,SAAC,EAAc,GAClB,IAAM,EAAqB,EAAa,KAAI,SAAC,EAAS,GACpD,cAAO,GACH,GAAG,EAAS,GAAG,OAAO,IAAY,EAAS,GAAG,GAC9C,MAGN,OADA,EAAmB,QAAQ,EAAS,GAAG,IAChC,EAAmB,UAAU,KAAK,OAE1C,UAGL,GAAc,EAAa,QAAQ,KAE5B,EAAa,KAAK,EAAO,SAAS,SAAW,IAAM,K,IC7B/C,EAAkB,SAAC,GAG9B,OAlC2B,SAAC,GAC5B,GAAc,KAAV,EACF,MAAM,IAAI,MAAM,0CAGlB,GAAc,MAAV,EACF,MAAM,IAAI,MAAM,yDA0BlB,CAAc,GAjBe,SAAC,GAC9B,GAAqB,kBAAV,IAAuB,OAAO,UAAU,GACjD,MAAM,IAAI,MAAM,mCAGlB,GACmB,kBAAV,IACN,gCAAgC,KAAK,GAEtC,MAAM,IAAI,MACR,gFAQJ,CAAgB,GACT,QAAO,GAAG,GAAQ,QAAQ,KAAM,MAAQ,GCxBlCA,EARH,WACV,IDoCA,ECpCMC,GDoCN,ECpC+C,SDsCxC,EAAc,ECtCW,eDsCa,ICrC7C,OACE,6BACGA,ICFPC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.c4b0b1bd.chunk.js","sourcesContent":["var getNumberWithComma = function (stringNumber, chunkSize) {\n    if (stringNumber.length <= chunkSize) {\n        return stringNumber;\n    }\n    else {\n        return stringNumber.replace(new RegExp(\"\\\\B(?=(\\\\d{\" + chunkSize + \"})+(?!\\\\d))\", \"g\"), \",\");\n    }\n};\nvar getNumberChunks = function (stringNumber, chunkSize) {\n    return getNumberWithComma(stringNumber, chunkSize).split(\",\");\n};\nvar getAbsoluteNumber = function (nativeNumber) {\n    return {\n        absoluteNumber: Math.abs(nativeNumber),\n        isNegative: nativeNumber < 0,\n    };\n};\n\n// https://ko.wiktionary.org/wiki/%EB%B6%80%EB%A1%9D:%EC%98%81%EC%96%B4_%EC%88%98%EC%82%AC\nvar numerals = [\n    [\"\", \"일\", \"이\", \"삼\", \"사\", \"오\", \"육\", \"칠\", \"팔\", \"구\"],\n    [\"\", \"십\", \"백\", \"천\"],\n    [\"\", \"만\", \"억\", \"조\"],\n];\nvar convertKorean = function (nativeNumber, option) {\n    var _a = getAbsoluteNumber(nativeNumber), absoluteNumber = _a.absoluteNumber, isNegative = _a.isNegative;\n    var chunks = getNumberChunks(absoluteNumber.toString(), 4);\n    var reverseChunks = chunks\n        .reverse()\n        .map(function (chunk) { return chunk.split(\"\").reverse(); });\n    var koreanChunks = [];\n    if (option.includes(\"MIXED\")) {\n        koreanChunks = reverseChunks\n            .map(function (reverseChunk, index) {\n            reverseChunk.unshift(numerals[2][index]);\n            reverseChunk.reverse();\n            return option.includes(\"COMMA\")\n                ? getNumberWithComma(reverseChunk.join(\"\"), 3)\n                : reverseChunk.join(\"\");\n        })\n            .reverse();\n    }\n    else {\n        koreanChunks = reverseChunks\n            .map(function (reverseChunk, index) {\n            var reverseKoreanChunk = reverseChunk.map(function (element, position) {\n                return Number(element)\n                    ? \"\" + numerals[0][Number(element)] + numerals[1][position]\n                    : \"\";\n            });\n            reverseKoreanChunk.unshift(numerals[2][index]);\n            return reverseKoreanChunk.reverse().join(\"\");\n        })\n            .reverse();\n    }\n    isNegative && koreanChunks.unshift(\"-\");\n    return koreanChunks.join(option.includes(\"SPACE\") ? \" \" : \"\");\n};\n\nvar validateEmpty = function (input) {\n    if (input === \"\") {\n        throw new Error(\"please check the input is empty string\");\n    }\n    if (input === \",\") {\n        throw new Error(\"please check the input has only one character : comma\");\n    }\n};\nfunction escapeRegExp(inputString) {\n    // https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_Expressions\n    return inputString.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nvar validateInteger = function (input) {\n    if (typeof input === \"number\" && !Number.isInteger(input)) {\n        throw new Error(\"please check the input is float\");\n    }\n    if (typeof input === \"string\" &&\n        !/^-?(1|2|3|4|5|6|7|8|9|0|,)+$/g.test(input)) {\n        throw new Error(\"please check the input has characters except for -?(0|1|2|3|4|5|6|7|8|9|0|,)\");\n    }\n};\n// type: \"korean\" | \"english\" | \"digit\" | \"notation\" | \"refinement\"\nvar getNativeNumber = function (input) {\n    validateEmpty(input);\n    validateInteger(input);\n    return Number((\"\" + input).replace(/,/g, \"\")) || 0;\n};\nvar getKoreanNumber = function (input, option) {\n    return convertKorean(getNativeNumber(input), option);\n};\n\nexport { escapeRegExp, getKoreanNumber, getNativeNumber, validateEmpty, validateInteger };\n//# sourceMappingURL=index.es.js.map\n",null,null,"import React from 'react'\n\nimport { getKoreanNumber } from 'numberconvert'\n\nconst App = () => {\n  const example = getKoreanNumber('12455,12,43', 'NORMAL')\n  return (\n    <div>\n      {example}\n    </div>\n  )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}